<!--
    MCP API POLICY
    This policy applies to all operations in the MCP API.
    It adds authorization header check for security.
-->
<policies>
    <inbound>
        <base />
        <check-header name="Authorization" failed-check-httpcode="401" failed-check-error-message="Not authorized" ignore-case="false" />
        <set-variable name="IV" value="{{EncryptionIV}}" />
        <set-variable name="key" value="{{EncryptionKey}}" />
        <set-variable name="decryptedSessionKey" value="@{
            // Retrieve the encrypted session key from the request header
            string authHeader = context.Request.Headers.GetValueOrDefault("Authorization");
        
            string encryptedSessionKey = authHeader.StartsWith("Bearer ") ? authHeader.Substring(7) : authHeader;
            
            // Decrypt the session key using AES
            byte[] IV = Convert.FromBase64String((string)context.Variables["IV"]);
            byte[] key = Convert.FromBase64String((string)context.Variables["key"]);
            
            byte[] encryptedBytes = Convert.FromBase64String(encryptedSessionKey);
            byte[] decryptedBytes = encryptedBytes.Decrypt("Aes", key, IV);
            
            return Encoding.UTF8.GetString(decryptedBytes);
        }" />
        <cache-lookup-value key="@($"EntraToken-{context.Variables.GetValueOrDefault("decryptedSessionKey")}")" variable-name="tokenData" />
        
        <choose>
            <when condition="@(context.Variables.GetValueOrDefault("tokenData") == null)">
                <return-response>
                    <set-status code="401" reason="Unauthorized" />
                    <set-header name="WWW-Authenticate" exists-action="override">
                        <value>Bearer error="invalid_token"</value>
                    </set-header>
                </return-response>
            </when>
        </choose>
        
        <set-header name="x-functions-key" exists-action="override">
            <value>{{function-host-key}}</value>
        </set-header>
        
        <set-variable name="bearer" value="@{
            var tokenDataJson = (string)context.Variables.GetValueOrDefault("tokenData");
            
            try {
                var tokenDataObj = JObject.Parse(tokenDataJson);
                return (string)tokenDataObj["access_token"];
            }
            catch (Exception ex) {
                context.Trace("mcp-api-policy", $"Error parsing token data: {ex.Message}");
                return "";
            }
        }" />
        
        <!-- Modify request body to include the bearer token in the params section -->
        <choose>
            <when condition="@(context.Request.Body != null && context.Request.Body.As<JObject>(preserveContent: true) != null)">
                <!-- If body exists and is valid JSON, add token to the params section -->
                <set-body>@{
                    var requestBody = context.Request.Body.As<JObject>(preserveContent: true);
                    if (requestBody["params"] != null && requestBody["params"].Type == JTokenType.Object)
                    {
                        var paramsObj = (JObject)requestBody["params"];
                        // Look for arguments section or create it if it doesn't exist
                        if (paramsObj["arguments"] != null && paramsObj["arguments"].Type == JTokenType.Object)
                        {
                            // Add bearer token to the arguments section
                            var argumentsObj = (JObject)paramsObj["arguments"];
                            argumentsObj["bearerToken"] = (string)context.Variables.GetValueOrDefault("bearer");
                        }
                        else if (paramsObj["arguments"] == null)
                        {
                            // Create arguments section if it doesn't exist
                            paramsObj["arguments"] = new JObject();
                            ((JObject)paramsObj["arguments"])["bearerToken"] = (string)context.Variables.GetValueOrDefault("bearer");
                        }
                        else
                        {
                            // Fallback: add directly to params if arguments exists but is not an object
                            paramsObj["bearerToken"] = (string)context.Variables.GetValueOrDefault("bearer");
                        }
                    }
                    else
                    {
                        // If params section doesn't exist or isn't an object, just add to root as fallback
                        requestBody["bearerToken"] = (string)context.Variables.GetValueOrDefault("bearer");
                    }
                    return requestBody.ToString();
                }</set-body>
            </when>
            <otherwise>
                <!-- If no body or not JSON, create a new JSON body with the token -->
                <set-body>@{
                    var newBody = new JObject();
                    newBody["bearerToken"] = (string)context.Variables.GetValueOrDefault("bearer");
                    return newBody.ToString();
                }</set-body>
            </otherwise>
        </choose>
        
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>
