<!--
    OAUTH CALLBACK POLICY
    This policy implements the callback endpoint for PKCE OAuth2 flow with Entra ID.
-->
<policies>
    <inbound>
        <base />
    <!-- Extract the authorization code and state from Entra ID callback -->
        <set-variable name="authCode" value="@((string)context.Request.Url.Query.GetValueOrDefault("code", ""))" />
        <set-variable name="entra_returned_state" value="@{
            string stateValue = (string)context.Request.Url.Query.GetValueOrDefault("state", "");
            return !string.IsNullOrEmpty(stateValue) ? System.Net.WebUtility.UrlDecode(stateValue) : "";
        }" />
        <set-variable name="sessionState" value="@((string)context.Request.Url.Query.GetValueOrDefault("session_state", ""))" />
        
        <!-- Validate required OAuth parameters -->
        <choose>
            <when condition="@(string.IsNullOrEmpty((string)context.Variables.GetValueOrDefault("authCode", "")) || string.IsNullOrEmpty((string)context.Variables.GetValueOrDefault("entra_returned_state", "")))">
                <return-response>
                    <set-status code="400" reason="Bad Request" />
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-body>@{
                        var errorResponse = new JObject();
                        errorResponse["error"] = "invalid_request";
                        errorResponse["error_description"] = "Missing required OAuth callback parameters";
                        return errorResponse.ToString();
                    }</set-body>
                </return-response>
            </when>
        </choose>
        
        <!-- Extract original MCP client state from Entra ID state cookie -->
        <set-variable name="mcp_original_state" value="@{
            try {
                var cookieHeader = context.Request.Headers.GetValueOrDefault("Cookie", "");
                if (string.IsNullOrEmpty(cookieHeader)) {
                    return "";
                }
                
                string cookieName = "__Host-MCP_ENTRA_STATE";
                string[] cookies = cookieHeader.Split(';');
                foreach (string cookie in cookies) {
                    string trimmedCookie = cookie.Trim();
                    if (trimmedCookie.StartsWith(cookieName + "=")) {
                        string cookieValue = trimmedCookie.Substring(cookieName.Length + 1);
                        string decodedValue = System.Net.WebUtility.UrlDecode(cookieValue);
                        
                        // Parse entraidState|sessionId|clientState format
                        string[] parts = decodedValue.Split('|');
                        if (parts.Length == 3) {
                            return parts[2]; // Return the original client state
                        }
                    }
                }
                
                return "";
            } catch (Exception ex) {
                return "";
            }
        }" />
        
        <!-- Detect if a consent state cookie is present (used only when consent page was shown) -->
        <set-variable name="has_consent_cookie" value="@{
            try {
                var cookieHeader = context.Request.Headers.GetValueOrDefault("Cookie", "");
                if (string.IsNullOrEmpty(cookieHeader)) {
                    return false;
                }
                string cookieName = "__Host-MCP_CONSENT_STATE";
                string[] cookies = cookieHeader.Split(';');
                foreach (string cookie in cookies) {
                    string trimmedCookie = cookie.Trim();
                    if (trimmedCookie.StartsWith(cookieName + "=")) {
                        return true;
                    }
                }
                return false;
            } catch (Exception) {
                return false;
            }
        }" />

        <!-- Validate that the original MCP client state matches what the user consented to -->
        <set-variable name="mcp_consent_valid" value="@{
            try {
                string mcpOriginalState = context.Variables.GetValueOrDefault<string>("mcp_original_state", "");
                if (string.IsNullOrEmpty(mcpOriginalState)) {
                    return false;
                }
                
                // Extract consent state from cookie
                var cookieHeader = context.Request.Headers.GetValueOrDefault("Cookie", "");
                if (string.IsNullOrEmpty(cookieHeader)) {
                    return false;
                }
                
                string cookieName = "__Host-MCP_CONSENT_STATE";
                string[] cookies = cookieHeader.Split(';');
                foreach (string cookie in cookies) {
                    string trimmedCookie = cookie.Trim();
                    if (trimmedCookie.StartsWith(cookieName + "=")) {
                        string cookieValue = trimmedCookie.Substring(cookieName.Length + 1);
                        string decodedValue = System.Text.Encoding.UTF8.GetString(
                            System.Convert.FromBase64String(cookieValue));
                        JObject consentData = JObject.Parse(decodedValue);
                        
                        string mcp_consented_state = consentData["state"]?.ToString();
                        
                        // Constant-time comparison to prevent timing attacks
                        if (string.IsNullOrEmpty(mcp_consented_state) || mcpOriginalState.Length != mcp_consented_state.Length) {
                            return false;
                        }
                        
                        int result = 0;
                        for (int i = 0; i < mcpOriginalState.Length; i++) {
                            result |= mcpOriginalState[i] ^ mcp_consented_state[i];
                        }
                        
                        return (result == 0);
                    }
                }
                
                return false;
            } catch (Exception ex) {
                return false;
            }
        }" />
        
        <!-- Validate consent state cookie -->
        <choose>
          <!-- Only enforce consent-state validation if the consent cookie is present.
              For re-auth flows that skip the consent page (approved clients), this cookie won't exist. -->
          <when condition="@(context.Variables.GetValueOrDefault<bool>("has_consent_cookie") && !context.Variables.GetValueOrDefault<bool>("mcp_consent_valid"))">
                <return-response>
                    <set-status code="400" reason="Bad Request" />
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-body>@{
                        var errorResponse = new JObject();
                        errorResponse["error"] = "invalid_state";
                        errorResponse["error_description"] = "State parameter does not match consented state.";
                        return errorResponse.ToString();
                    }</set-body>
                </return-response>
            </when>
        </choose>
        
        <!-- Clear the consent state cookie since it's been validated -->
        <set-variable name="clear_consent_cookie" value="__Host-MCP_CONSENT_STATE=; Max-Age=0; Path=/; Secure; HttpOnly; SameSite=Lax" />
        
        <!-- Validate Entra ID state cookie correlation -->
        <set-variable name="entra_validation_result" value="@{
            try {
                string entraReturnedState = context.Variables.GetValueOrDefault<string>("entra_returned_state", "");
                if (string.IsNullOrEmpty(entraReturnedState)) {
                    return "invalid|";
                }
                
                // Extract Entra ID state from cookie
                var cookieHeader = context.Request.Headers.GetValueOrDefault("Cookie", "");
                if (string.IsNullOrEmpty(cookieHeader)) {
                    return "invalid|";
                }
                
                string cookieName = "__Host-MCP_ENTRA_STATE";
                string[] cookies = cookieHeader.Split(';');
                foreach (string cookie in cookies) {
                    string trimmedCookie = cookie.Trim();
                    if (trimmedCookie.StartsWith(cookieName + "=")) {
                        string cookieValue = trimmedCookie.Substring(cookieName.Length + 1);
                        string decodedValue = System.Net.WebUtility.UrlDecode(cookieValue);
                        
                        // Parse entraidState|sessionId|clientState format
                        string[] parts = decodedValue.Split('|');
                        if (parts.Length != 3) {
                            return "invalid|";
                        }
                        
                        string entra_stored_state = parts[0];
                        string session_id = parts[1];
                        string mcp_stored_state = parts[2];
                        
                        // Validate that returned state matches our Entra ID state
                        // (Entra ID returns the entraidState we sent as state parameter)
                        if (string.IsNullOrEmpty(entra_stored_state) || entraReturnedState.Length != entra_stored_state.Length) {
                            return "invalid|";
                        }
                        
                        // Constant-time comparison to prevent timing attacks
                        int result = 0;
                        for (int i = 0; i < entraReturnedState.Length; i++) {
                            result |= entraReturnedState[i] ^ entra_stored_state[i];
                        }
                        
                        // Return validation result and session ID as a combined value
                        // Format: "valid|sessionId" or "invalid|"
                        if (result == 0) {
                            return $"valid|{session_id}";
                        } else {
                            return "invalid|";
                        }
                    }
                }
                
                return "invalid|";
            } catch (Exception ex) {
                return "invalid|";
            }
        }" />
        
        <!-- Extract session ID from validation result -->
        <set-variable name="session_id" value="@{
            string validationResult = context.Variables.GetValueOrDefault<string>("entra_validation_result", "invalid|");
            string[] parts = validationResult.Split('|');
            return parts.Length > 1 ? parts[1] : "";
        }" />
        
        <!-- Validate Entra ID state cookie -->
        <choose>
            <when condition="@{
                string validationResult = context.Variables.GetValueOrDefault<string>("entra_validation_result", "invalid|");
                string[] parts = validationResult.Split('|');
                return parts.Length == 0 || parts[0] != "valid";
            }">
                <return-response>
                    <set-status code="400" reason="Bad Request" />
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-body>@{
                        var errorResponse = new JObject();
                        errorResponse["error"] = "invalid_state";
                        errorResponse["error_description"] = "Entra ID state correlation failed. Possible CSRF attack.";
                        return errorResponse.ToString();
                    }</set-body>
                </return-response>
            </when>
        </choose>
        
        <!-- Clear the Entra ID state cookie since it's been validated -->
        <set-variable name="clear_entra_state_cookie" value="__Host-MCP_ENTRA_STATE=; Max-Age=0; Path=/; Secure; HttpOnly; SameSite=None" />
        
        <!-- Retrieve stored PKCE code verifier using the session ID -->
        <cache-lookup-value key="@("CodeVerifier-"+context.Variables.GetValueOrDefault("session_id", ""))" variable-name="codeVerifier" />
        
        <!-- Validate that code verifier was found in cache -->
        <choose>
            <when condition="@(string.IsNullOrEmpty((string)context.Variables.GetValueOrDefault("codeVerifier", "")))">
                <return-response>
                    <set-status code="400" reason="Bad Request" />
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-body>@{
                        var errorResponse = new JObject();
                        errorResponse["error"] = "invalid_request";
                        errorResponse["error_description"] = "Authorization session expired or invalid state parameter";
                        return errorResponse.ToString();
                    }</set-body>
                </return-response>
            </when>
        </choose>
        
        <!-- Set token request parameters -->
        <set-variable name="codeChallengeMethod" value="S256" />
        <set-variable name="redirectUri" value="{{OAuthCallbackUri}}" />
        <set-variable name="clientId" value="{{EntraIDClientId}}" />
        <set-variable name="clientAssertionType" value="@(System.Net.WebUtility.UrlEncode("urn:ietf:params:oauth:client-assertion-type:jwt-bearer"))" />
        <authentication-managed-identity resource="api://AzureADTokenExchange" client-id="{{EntraIDFicClientId}}" output-token-variable-name="ficToken"/>
         
        <!-- Configure token request to Entra ID -->
        <set-method>POST</set-method>
        <set-header name="Content-Type" exists-action="override">
            <value>application/x-www-form-urlencoded</value>
        </set-header>
        <set-body>@{
            return $"client_id={context.Variables.GetValueOrDefault("clientId")}&grant_type=authorization_code&code={context.Variables.GetValueOrDefault("authCode")}&redirect_uri={context.Variables.GetValueOrDefault("redirectUri")}&scope={context.Variables.GetValueOrDefault("clientId")}/.default&code_verifier={context.Variables.GetValueOrDefault("codeVerifier")}&client_assertion_type={context.Variables.GetValueOrDefault("clientAssertionType")}&client_assertion={context.Variables.GetValueOrDefault("ficToken")}";
        }</set-body>
        <rewrite-uri template="/token" />
    </inbound>

    <backend>
        <base />
    </backend>    <outbound>
        <base />
        <!-- Process the token response from Entra ID -->
        <trace source="apim-policy">
            <message>@("Token response received: " + context.Response.Body.As<string>(preserveContent: true))</message>
        </trace>
        <!-- Check if the response is successful (200 OK) and contains a token -->
        <choose>
            <when condition="@(context.Response.StatusCode != 200 || string.IsNullOrEmpty(context.Response.Body.As<JObject>(preserveContent: true)["access_token"]?.ToString()))">
                <return-response>
                    <set-status code="@(context.Response.StatusCode)" reason="@(context.Response.StatusReason)" />
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-body>@{
                        var errorResponse = new JObject();
                        errorResponse["error"] = "token_error";
                        errorResponse["error_description"] = "Failed to retrieve access token from Entra ID.";
                        return errorResponse.ToString();
                    }</set-body>
                </return-response>
            </when>
        </choose>
        
        <!-- Generate secure session token for MCP client -->
        <set-variable name="IV" value="{{EncryptionIV}}" />
        <set-variable name="key" value="{{EncryptionKey}}" />
        <set-variable name="sessionId" value="@((string)Guid.NewGuid().ToString().Replace("-", ""))" />
        <set-variable name="encryptedSessionKey" value="@{
            // Generate a unique session ID
            string sessionId = (string)context.Variables.GetValueOrDefault("sessionId");
            byte[] sessionIdBytes = Encoding.UTF8.GetBytes(sessionId);
            
            // Encrypt the session ID using AES
            byte[] IV = Convert.FromBase64String((string)context.Variables["IV"]);
            byte[] key = Convert.FromBase64String((string)context.Variables["key"]);
            
            byte[] encryptedBytes = sessionIdBytes.Encrypt("Aes", key, IV);
            
            return Convert.ToBase64String(encryptedBytes);
        }" />

        <!-- Lookup MCP client redirect URI stored during authorization -->
        <cache-lookup-value key="@((string)context.Variables.GetValueOrDefault("session_id"))" variable-name="mcpConfirmConsentCode" />
        <cache-lookup-value key="@($"McpClientAuthData-{context.Variables.GetValueOrDefault("mcpConfirmConsentCode")}")" variable-name="mcpClientData" />
        
        <!-- Validate that MCP client data was found in cache -->
        <choose>
            <when condition="@(string.IsNullOrEmpty((string)context.Variables.GetValueOrDefault("mcpConfirmConsentCode", "")) || string.IsNullOrEmpty((string)context.Variables.GetValueOrDefault("mcpClientData", "")))">
                <return-response>
                    <set-status code="400" reason="Bad Request" />
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-body>@{
                        var errorResponse = new JObject();
                        errorResponse["error"] = "invalid_request";
                        errorResponse["error_description"] = "MCP client authorization session expired or invalid";
                        return errorResponse.ToString();
                    }</set-body>
                </return-response>
            </when>
        </choose>

        <!-- Use the MCP client's original state parameter -->
        <set-variable name="mcp_return_state" value="@(context.Variables.GetValueOrDefault<string>("mcp_original_state"))" />
        <!-- Extract the stored mcp client callback redirect uri from cache -->
        <set-variable name="callbackRedirectUri" value="@{
            var mcpAuthDataAsJObject = JObject.Parse((string)context.Variables["mcpClientData"]);
            return mcpAuthDataAsJObject["mcpCallbackRedirectUri"];
        }" />
        <!-- Store the encrypted session key and Entra token in cache -->
        <!-- Store the encrypted session key with the MCP confirmation code as key -->
        <cache-store-value duration="3600" 
            key="@($"AccessToken-{context.Variables.GetValueOrDefault("mcpConfirmConsentCode")}")" 
            value="@($"{context.Variables.GetValueOrDefault("encryptedSessionKey")}")" />
        
        <!-- Store the Entra token for later use (using the newly generated session ID) -->
        <cache-store-value duration="3600" 
            key="@($"EntraToken-{context.Variables.GetValueOrDefault("sessionId")}")"
            value="@(context.Response.Body.As<JObject>(preserveContent: true).ToString())" />
        
        <!-- Redirect back to MCP client with confirmation code -->
        <return-response>
            <set-status code="302" reason="Found" />
            <set-header name="Location" exists-action="override">
                <value>@($"{context.Variables.GetValueOrDefault("callbackRedirectUri")}?code={context.Variables.GetValueOrDefault("mcpConfirmConsentCode")}&state={System.Net.WebUtility.UrlEncode((string)context.Variables.GetValueOrDefault("mcp_return_state"))}")</value>
            </set-header>
            <!-- Clear the consent state cookie -->
            <set-header name="Set-Cookie" exists-action="append">
                <value>@(context.Variables.GetValueOrDefault<string>("clear_consent_cookie"))</value>
            </set-header>
            <!-- Clear the Entra ID state cookie -->
            <set-header name="Set-Cookie" exists-action="append">
                <value>@(context.Variables.GetValueOrDefault<string>("clear_entra_state_cookie"))</value>
            </set-header>
            <set-body />
        </return-response>
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>